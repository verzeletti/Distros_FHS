#
# Bash version 20250904 - verzeletti (at) gmail (dot) com
#
# Prompt Generator:
#    https://bash-prompt-generator.org/
#
# Colors:
#    https://misc.flogisoft.com/bash/tip_colors_and_formatting
#
# Examples:
#    /usr/share/doc/bash/examples/startup-files
###

# If not running interactively, don't do anything
[[ $- != *i* ]] && return
#case $- in
#    *i*) ;;
#      *) return;;
#esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000000
HISTFILESIZE=2000000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

# VLAN Segment: DMZ, LAN, ACAD, TEST
HOST_PROMPT=TEST

# Prompt default: oneline, oneline_nouser, twoline, twoline_nouser
PROMPT_USER=twoline
PROMPT_ROOT=oneline_nouser

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    case "$HOST_PROMPT" in
        DMZ)
            host_color='\[\033[1;34m\]';;
        LAN)
            host_color='\[\033[00;32m\]';;
        ACAD)
            host_color='\[\033[1;31m\]';;
        TEST)
            host_color='\[\033[1;37m\]';;
    esac
    VIRTUAL_ENV_DISABLE_PROMPT=1

    # ALL USERS
    prompt_color='\[\033[;97m\]'	# branco
    user_color='\[\033[;97m\]'		# branco
    info_color='\[\033[00;90m\]'	# cinza
    #prompt_symbol=' ã‰¿'
    prompt_symbol='@'
    PROMPT_ALTERNATIVE=$PROMPT_USER

    # ROOT
    if [ "$EUID" -eq 0 ]; then # Change prompt colors for root user
        prompt_color='\[\033[;97m\]'	# branco
        user_color='\[\033[;97m\]'	# branco
        info_color='\[\033[00;90m\]'	# cinza
        # Skull emoji for root terminal
        #prompt_symbol=ðŸ’€
        unset PROMPT_ALTERNATIVE
        PROMPT_ALTERNATIVE=$PROMPT_ROOT
    fi
    case "$PROMPT_ALTERNATIVE" in
        twoline)
            PS1=$prompt_color'â”Œâ”€â”€'$info_color' \t '$prompt_color'('$user_color'\u'$host_color$prompt_symbol'\h'$prompt_color')-['$info_color'\w'$prompt_color']\n'$prompt_color'â””â”€'$info_color'\$\[\033[0m\] ';;
        twoline_nouser)
            PS1=$prompt_color'â”Œâ”€â”€'$info_color' \A '$prompt_color'('$host_color'\h'$prompt_color')-['$info_color'\w'$prompt_color']\n'$prompt_color'â””â”€'$info_color'\$\[\033[0m\] ';;
        oneline)
            PS1=$prompt_color'['$info_color'\A '$user_color'\u'$host_color$prompt_symbol'\h'$info_color' \w'$prompt_color']\$ ' ;;
        oneline_nouser)
            PS1=$prompt_color'['$info_color'\t '$host_color'\h'$info_color' \w'$prompt_color']\$ ' ;;
    esac
    unset prompt_color
    unset user_color
    unset info_color
    unset prompt_symbol

else
    PS1='\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Global aliases and functions
if [ -f /etc/bash_aliases ]; then
        . /etc/bash_aliases
fi

#
# # ex - archive extractor
# # usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar -jxvf $1   ;;
      *.tar.gz)    tar -zxvf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar -xvf $1    ;;
      *.tbz2)      tar -jxvf $1   ;;
      *.tgz)       tar -zxvf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

